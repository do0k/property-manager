// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  code       Int         @unique
  otp        String?
  expire     DateTime?   @db.Timestamptz()
  name       String
  mobile     String      @unique
  createdAt  DateTime    @db.Timestamptz()
  updatedAt  DateTime    @updatedAt @db.Timestamptz()
  daletedAt  DateTime    @db.Timestamptz()
  properties Property[]
  agreements Agreement[]
  role       UserRole
  payments   Payment[]
  orders     Order[]
}

model Property {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  usage       String
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  rent        Int
  meterage    Int
  deposit     Int
  collateral  Int
  details     Json?
  address     String
  createdAt   DateTime    @db.Timestamptz()
  updatedAt   DateTime    @updatedAt @db.Timestamptz()
  daletedAt   DateTime    @db.Timestamptz()
  agreements  Agreement[]
}

model Agreement {
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @db.Timestamptz()
  updatedAt  DateTime @updatedAt @db.Timestamptz()
  daletedAt  DateTime @db.Timestamptz()
  userId     Int
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  details    Json?
  startAt    DateTime @db.Timestamptz()
  dueAt      DateTime @db.Timestamptz()
  orders     Order[]

  @@id([userId, propertyId, startAt])
}

model Payment {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  amount    Int
  date      DateTime      @db.Timestamptz()
  status    PaymentStatus
  portId    Int
  port      PaymentPort   @relation(fields: [portId], references: [id])
  createdAt DateTime      @db.Timestamptz()
  updatedAt DateTime      @updatedAt @db.Timestamptz()
  orderId   Int
  order     Order         @relation(fields: [orderId], references: [id])
}

model Order {
  id         Int       @id @default(autoincrement())
  userId     Int
  propertyId Int
  amount     Int
  paid       Boolean   @default(false)
  dueAt      DateTime  @db.Timestamptz()
  madeAt     DateTime  @db.Timestamptz()
  agreement  Agreement @relation(fields: [userId, propertyId, madeAt], references: [userId, propertyId, startAt])
  user       User      @relation(fields: [userId], references: [id])
  payments   Payment[]
}

model PaymentPort {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String
  details   Json?
  createdAt DateTime  @db.Timestamptz()
  updatedAt DateTime  @updatedAt @db.Timestamptz()
  payments  Payment[]
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentStatus {
  DONE
  PENDING
  RETURNED
  CANCELED
  CREATED
  PAID
}
